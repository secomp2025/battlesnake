// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package database

import (
	"context"
)

const createCode = `-- name: CreateCode :one
INSERT INTO codes (code)
VALUES (?)
RETURNING id, code, created_at
`

func (q *Queries) CreateCode(ctx context.Context, code string) (Code, error) {
	row := q.db.QueryRowContext(ctx, createCode, code)
	var i Code
	err := row.Scan(&i.ID, &i.Code, &i.CreatedAt)
	return i, err
}

const createSnake = `-- name: CreateSnake :one
INSERT INTO snakes (path, lang, team_id)
VALUES (?, ?, ?)
RETURNING id, path, lang, created_at, updated_at, team_id
`

type CreateSnakeParams struct {
	Path   string
	Lang   string
	TeamID int64
}

func (q *Queries) CreateSnake(ctx context.Context, arg CreateSnakeParams) (Snake, error) {
	row := q.db.QueryRowContext(ctx, createSnake, arg.Path, arg.Lang, arg.TeamID)
	var i Snake
	err := row.Scan(
		&i.ID,
		&i.Path,
		&i.Lang,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.TeamID,
	)
	return i, err
}

const createTeam = `-- name: CreateTeam :one
INSERT INTO teams (name, code_id)
VALUES (?, ?)
RETURNING id, name, code_id, created_at
`

type CreateTeamParams struct {
	Name   string
	CodeID int64
}

func (q *Queries) CreateTeam(ctx context.Context, arg CreateTeamParams) (Team, error) {
	row := q.db.QueryRowContext(ctx, createTeam, arg.Name, arg.CodeID)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CodeID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteCode = `-- name: DeleteCode :exec
DELETE FROM codes
WHERE code = ?
`

func (q *Queries) DeleteCode(ctx context.Context, code string) error {
	_, err := q.db.ExecContext(ctx, deleteCode, code)
	return err
}

const deleteSnake = `-- name: DeleteSnake :exec
DELETE FROM snakes
WHERE id = ?
`

func (q *Queries) DeleteSnake(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSnake, id)
	return err
}

const deleteTeam = `-- name: DeleteTeam :exec
DELETE FROM teams
WHERE id = ?
`

func (q *Queries) DeleteTeam(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTeam, id)
	return err
}

const findCode = `-- name: FindCode :one
SELECT id, code, created_at
FROM codes
WHERE code = ?
LIMIT 1
`

func (q *Queries) FindCode(ctx context.Context, code string) (Code, error) {
	row := q.db.QueryRowContext(ctx, findCode, code)
	var i Code
	err := row.Scan(&i.ID, &i.Code, &i.CreatedAt)
	return i, err
}

const getCode = `-- name: GetCode :one
SELECT id, code, created_at
FROM codes
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetCode(ctx context.Context, id int64) (Code, error) {
	row := q.db.QueryRowContext(ctx, getCode, id)
	var i Code
	err := row.Scan(&i.ID, &i.Code, &i.CreatedAt)
	return i, err
}

const getSnake = `-- name: GetSnake :one
SELECT id, path, lang, created_at, updated_at, team_id
FROM snakes
WHERE id = ?
LIMIT 1
`

// ------ SNAKE --------
func (q *Queries) GetSnake(ctx context.Context, id int64) (Snake, error) {
	row := q.db.QueryRowContext(ctx, getSnake, id)
	var i Snake
	err := row.Scan(
		&i.ID,
		&i.Path,
		&i.Lang,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.TeamID,
	)
	return i, err
}

const getTeam = `-- name: GetTeam :one
SELECT id, name, code_id, created_at
FROM teams
WHERE id = ?
LIMIT 1
`

// ------ TEAM --------
func (q *Queries) GetTeam(ctx context.Context, id int64) (Team, error) {
	row := q.db.QueryRowContext(ctx, getTeam, id)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CodeID,
		&i.CreatedAt,
	)
	return i, err
}

const getTeamByCode = `-- name: GetTeamByCode :one
SELECT id, name, code_id, created_at
FROM teams
WHERE code_id = ?
LIMIT 1
`

func (q *Queries) GetTeamByCode(ctx context.Context, codeID int64) (Team, error) {
	row := q.db.QueryRowContext(ctx, getTeamByCode, codeID)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CodeID,
		&i.CreatedAt,
	)
	return i, err
}

const listCodes = `-- name: ListCodes :many
SELECT id, code, created_at
FROM codes
ORDER BY created_at ASC
`

func (q *Queries) ListCodes(ctx context.Context) ([]Code, error) {
	rows, err := q.db.QueryContext(ctx, listCodes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Code
	for rows.Next() {
		var i Code
		if err := rows.Scan(&i.ID, &i.Code, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSnakes = `-- name: ListSnakes :many
SELECT id, path, lang, created_at, updated_at, team_id
FROM snakes
ORDER BY created_at ASC
`

func (q *Queries) ListSnakes(ctx context.Context) ([]Snake, error) {
	rows, err := q.db.QueryContext(ctx, listSnakes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Snake
	for rows.Next() {
		var i Snake
		if err := rows.Scan(
			&i.ID,
			&i.Path,
			&i.Lang,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TeamID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTeamSnakes = `-- name: ListTeamSnakes :many
SELECT id, path, lang, created_at, updated_at, team_id
FROM snakes
WHERE team_id = ?
ORDER BY updated_at ASC
`

func (q *Queries) ListTeamSnakes(ctx context.Context, teamID int64) ([]Snake, error) {
	rows, err := q.db.QueryContext(ctx, listTeamSnakes, teamID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Snake
	for rows.Next() {
		var i Snake
		if err := rows.Scan(
			&i.ID,
			&i.Path,
			&i.Lang,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TeamID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTeams = `-- name: ListTeams :many
SELECT id, name, code_id, created_at
FROM teams
ORDER BY created_at ASC
`

func (q *Queries) ListTeams(ctx context.Context) ([]Team, error) {
	rows, err := q.db.QueryContext(ctx, listTeams)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Team
	for rows.Next() {
		var i Team
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CodeID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCode = `-- name: UpdateCode :exec
UPDATE codes
SET code = ?
WHERE code = ?
RETURNING id, code, created_at
`

type UpdateCodeParams struct {
	Code   string
	Code_2 string
}

func (q *Queries) UpdateCode(ctx context.Context, arg UpdateCodeParams) error {
	_, err := q.db.ExecContext(ctx, updateCode, arg.Code, arg.Code_2)
	return err
}

const updateSnake = `-- name: UpdateSnake :exec
UPDATE snakes
SET path = ?,
    lang = ?,
    updated_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, path, lang, created_at, updated_at, team_id
`

type UpdateSnakeParams struct {
	Path string
	Lang string
	ID   int64
}

func (q *Queries) UpdateSnake(ctx context.Context, arg UpdateSnakeParams) error {
	_, err := q.db.ExecContext(ctx, updateSnake, arg.Path, arg.Lang, arg.ID)
	return err
}

const updateTeam = `-- name: UpdateTeam :exec
UPDATE teams
SET name = ?,
    code_id = ?
WHERE id = ?
RETURNING id, name, code_id, created_at
`

type UpdateTeamParams struct {
	Name   string
	CodeID int64
	ID     int64
}

func (q *Queries) UpdateTeam(ctx context.Context, arg UpdateTeamParams) error {
	_, err := q.db.ExecContext(ctx, updateTeam, arg.Name, arg.CodeID, arg.ID)
	return err
}
