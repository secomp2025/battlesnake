package components

import (
	"fmt"
	"math"
)

const (
	CELL_SIZE      = 20
	CELL_SIZE_HALF = CELL_SIZE / 2
	CELL_SPACING   = 4
	GRID_BORDER    = 10
)

type SvgCalcParams struct {
	CellSize     float64
	CellSizeHalf float64
	CellSpacing  float64
	GridBorder   float64
	Height       float64
	Width        float64
}

templ Gameboard(w, h int, boardData BoardData, gameID string) {
	{{
	svgWidth := 2*GRID_BORDER + float64(w)*CELL_SIZE + math.Max(float64(w-1), 0)*float64(CELL_SPACING)
	svgHeight := 2*GRID_BORDER + float64(h)*CELL_SIZE + math.Max(float64(h-1), 0)*float64(CELL_SPACING)

	svgViewBox := fmt.Sprintf("0 0 %f %f", svgWidth, svgHeight)
	svgCalcParams := SvgCalcParams{
		CellSize:     CELL_SIZE,
		CellSizeHalf: CELL_SIZE_HALF,
		CellSpacing:  CELL_SPACING,
		GridBorder:   GRID_BORDER,
		Height:       svgHeight,
		Width:        svgWidth,
	}
	}}
	<section class="rounded-3xl bg-white border border-gray-200 shadow-sm p-4 md:p-6">
		if gameID == "" {
			<div class="flex gap-4 mb-2 items-center w-full ">
				<div class="h-10 w-10 rounded-xl bg-pink-100 text-pink-700 grid place-items-center text-xl">▶️</div>
				<h2 class="text-xl font-bold text-gray-900">Simular</h2>
				<div class=" flex flex-col gap-3 items-end w-full">
					<button id="btn-refresh-game" type="submit" class="w-48 px-4 py-2 bg-pink-600 text-white font-semibold rounded-lg shadow hover:bg-pink-700 transition">Atualizar</button>
					<label for="ghost-checkbox" class="flex items-center gap-2 cursor-pointer" role="checkbox" aria-checked="false" aria-label="Simular com upload anterior" title="Simular com upload anterior">
						Upload anterior
						<input type="checkbox" name="ghost" id="ghost-checkbox" class="hidden peer"/>
						<div class="w-4 h-4 rounded-full bg-gray-200 peer-checked:bg-gradient-to-r from-pink-600 to-pink-800 shadow"></div>
					</label>
				</div>
			</div>
		}
		<div class="flex gap-4 flex-row">
			<div class="flex-shrik w-full">
				<div class="w-full flex justify-center">
					<svg
						role="button"
						id="btn-first-frame"
						class="playback-btn cursor-pointer mx-1"
						width="28"
						height="28"
						viewBox="0 0 28 28"
						data-action="first"
						fill="none"
						xmlns="http://www.w3.org/2000/svg"
					>
						<title>Primeiro Frame</title>
						<rect width="28" height="28" rx="6" fill="#F3F4F6"></rect>
						<polygon points="18,7 18,21 10,14" fill="#6B7280"></polygon>
						<rect x="8" y="7" width="2" height="14" rx="1" fill="#6B7280"></rect>
					</svg>
					<svg
						class="playback-btn cursor-pointer mx-1"
						role="button"
						width="28"
						height="28"
						viewBox="0 0 28 28"
						data-action="prev"
						id="btn-prev-frame"
						fill="none"
						xmlns="http://www.w3.org/2000/svg"
					>
						<title>Voltar um Frame</title>
						<rect width="28" height="28" rx="6" fill="#F3F4F6"></rect>
						<polygon points="17,7 17,21 11,14" fill="#6B7280"></polygon>
					</svg>
					<svg
						id="btn-play"
						class="playback-btn cursor-pointer mx-1"
						role="button"
						width="28"
						height="28"
						viewBox="0 0 28 28"
						data-action="play"
						fill="none"
						xmlns="http://www.w3.org/2000/svg"
						style="display: inline;"
					>
						<title>Play</title>
						<rect width="28" height="28" rx="6" fill="#F3F4F6"></rect>
						<polygon points="11,8 11,20 19,14" fill="#6B7280"></polygon>
					</svg>
					<svg
						id="btn-pause"
						role="button"
						class="playback-btn cursor-pointer mx-1"
						width="28"
						height="28"
						viewBox="0 0 28 28"
						data-action="pause"
						fill="none"
						xmlns="http://www.w3.org/2000/svg"
						style="display: none;"
					>
						<title>Pausar</title>
						<rect width="28" height="28" rx="6" fill="#F3F4F6"></rect>
						<rect x="9" y="8" width="3" height="12" rx="1" fill="#6B7280"></rect>
						<rect x="16" y="8" width="3" height="12" rx="1" fill="#6B7280"></rect>
					</svg>
					<svg
						id="btn-next-frame"
						role="button"
						class="playback-btn cursor-pointer mx-1"
						width="28"
						height="28"
						viewBox="0 0 28 28"
						data-action="next"
						fill="none"
						xmlns="http://www.w3.org/2000/svg"
					>
						<title>Avançar um Frame</title>
						<rect width="28" height="28" rx="6" fill="#F3F4F6"></rect>
						<polygon points="11,7 11,21 17,14" fill="#6B7280"></polygon>
					</svg>
					<svg
						id="btn-last-frame"
						class="playback-btn cursor-pointer mx-1"
						role="button"
						width="28"
						height="28"
						viewBox="0 0 28 28"
						data-action="last"
						fill="none"
						xmlns="http://www.w3.org/2000/svg"
					>
						<title>Último Frame</title>
						<rect width="28" height="28" rx="6" fill="#F3F4F6"></rect>
						<polygon points="10,7 10,21 18,14" fill="#6B7280"></polygon>
						<rect x="18" y="7" width="2" height="14" rx="1" fill="#6B7280"></rect>
					</svg>
				</div>
				<svg id="gameboard" class="gameboard" viewBox={ svgViewBox }>
					@SvgGrid(w, h, svgCalcParams)
				</svg>
			</div>
			<aside id="scoreboard" class="max-w-sm w-full flex flex-col">
				<h3 class="text-lg font-semibold text-gray-900 mb-2">Turno <span id="scoreboard-turn">0</span></h3>
				<div id="scoreboard-snakes"></div>
			</aside>
		</div>
		if gameID == "" {
			<script type="module">
				import initGameClient from "/static/board_client.js";
				import initScoreboard from "/static/scoreboard.js";

				let scoreboard = initScoreboard();

				let gameClient = initGameClient({
					onRenderFrame: scoreboard.updateScoreboard,
				});

				const btnRefreshGame = document.getElementById("btn-refresh-game");
				if (btnRefreshGame) {
					btnRefreshGame.addEventListener("click", async () => {
						const ghost = document.getElementById("ghost-checkbox").checked;
						fetch("/create-game?ghost=" + ghost, {
							method: "POST"
						}).then((res) => {
							// if no content
							if (res.status == 204) {
								throw new Error("Nenhuma Snake online");
							}

							if (res.status != 201) {
								throw new Error("Erro ao criar jogo");
							}
							return res.text();
						}).then(async (gameId) => {
							await gameClient.connect(`/game/${gameId}`).catch((err) => {
								console.error("[Refresh] Error connecting to game:", err);
							});
						}).catch((err) => {
							showToast({message: err.message, type: "error"});
						});
					});
				}
			</script>
		} else {
			<script type="module">
				let gameid = {{ gameID }};
				import initGameClient from "/static/board_client.js";
				import initScoreboard from "/static/scoreboard.js";

				let scoreboard = initScoreboard();

				let gameClient = initGameClient({
					onRenderFrame: scoreboard.updateScoreboard,
					clearStorage: true
				});

				gameClient.connect(`/game/${gameid}`).catch((err) => {
					console.error("[Refresh] Error connecting to game:", err);
				});
			</script>
		}
	</section>
}
